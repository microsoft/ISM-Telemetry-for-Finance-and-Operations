<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ISMDMFStagingLog_Extension</Name>
	<SourceCode>
		<Declaration><![CDATA[
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.
/// <summary>
/// DMF Telemetry for Staging Log
/// </summary>
[ExtensionOf(tableStr(DMFStagingLog))]
public final class ISMDMFStagingLog_Extension
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>insertLogs</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts logs into the DMFStagingLog table and captures telemetry data for the staging log process.
    /// </summary>
    /// <param name="_dMFExecutionId">The execution ID of the DMF process.</param>
    /// <param name="_sourceOrTarget">Specifies whether the log is for the source or target.</param>
    /// <param name="_infologStartIndex">The starting index of the infolog messages to copy.</param>
    /// <param name="_stagingLogRecId">The record ID of the staging log entry.</param>
    /// <param name="_entityName">The name of the entity being processed.</param>
    /// <param name="_batchId">The batch ID associated with the process.</param>
    /// <param name="_defGroupName">The definition group name for the process.</param>
    /// <returns>The record ID of the inserted log entry.</returns>
    public static client server RecId insertLogs(DMFExecutionId         _dMFExecutionId,
                                                 DMFSourceTarget        _sourceOrTarget,
                                                 int                    _infologStartIndex,
                                                 RecId                  _stagingLogRecId,
                                                 DMFEntityName          _entityName,
                                                 RefRecId               _batchId,
                                                 DMFDefinitionGroupName _defGroupName)
    {

        ISMTelemetryDMF telemetry = ISMTelemetryDMF::construct();

        //need to retrieve the logs before next call as there it will be cleared
        InfologData infologData = infolog.copy(_infologStartIndex, infologLine());

        RecId ret = next insertLogs(_dMFExecutionId, _sourceOrTarget, _infologStartIndex, _stagingLogRecId, _entityName, _batchId, _defGroupName);
        try
        {
            str messageStr; 
            MessageSeverity messageSeverity;
            //Log the error
            if (infologData)
            {
                for( int i = 1; i <= conlen(infologData); i++)
                {
                    container message =   conpeek(infologData, i);
                    if (message)
                    {
                        if (conpeek(message, 2))//insert only if message not empty or null
                        {
 
                          
                            messageSeverity = conpeek(message, 1);
                            messageStr  += conpeek(message, 2);
                            
                        }
                    }
                }
            }

            telemetry.addRuntimeProperty(ISMTelemetryProperties::DefinitionGroupId, _defGroupName);
            telemetry.addRuntimeProperty(ISMTelemetryProperties::EntityName, _entityName);
            telemetry.addRuntimeProperty(ISMTelemetryProperties::ExecutionId, _dMFExecutionId);
            telemetry.addRuntimeProperty(ISMTelemetryProperties::StagingRecId, int642Str(_stagingLogRecId));
            telemetry.addRuntimeProperty(ISMTelemetryProperties::Message, messageStr);
            telemetry.addRuntimeProperty(ISMTelemetryProperties::Severity, enum2Str(messageSeverity));


            if(messageStr != '')
            {
                telemetry.processEvent(ISMTelemetryEventNames::DMFStagingLogMessage);
            }
        }
        catch
        {
            Global::exceptionTextFallThrough();
        }

       

        return ret;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>