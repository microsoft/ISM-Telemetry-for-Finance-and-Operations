<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ISMDualWriteSyncOutbound_Extension</Name>
	<SourceCode>
		<Declaration><![CDATA[
using Microsoft.Dynamics.DualWrite.Metadata;
using Microsoft.Dynamics.DualWrite.Metadata.Util;
using Microsoft.Dynamics.DualWrite.SyncProviders;
using Microsoft.Dynamics.DualWrite.Metadata.Contracts;
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.
/// <summary>
/// Telemetry for Dualwrite errors
/// </summary>
[ExtensionOf(classStr(DualWriteSyncOutbound))]
public final class ISMDualWriteSyncOutbound_Extension
{
    public str errorMsg;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>WriteEntityRecordToCDS</Name>
				<Source><![CDATA[
    /// <summary>
    /// The actual DW write action
    /// </summary>
    /// <param name = "entityRecord">the record </param>
    /// <param name = "isDelete">is a delete or not</param>
    /// <param name = "isBatchCommit">Commits in batch or not</param>
    protected void WriteEntityRecordToCDS(Common entityRecord, NoYes isDelete, boolean isBatchCommit)
    {
        //This likely does not work as the base class throws an exception with errors, therfore it will never reach here
        
        next WriteEntityRecordToCDS(entityRecord, isDelete, isBatchCommit);

        ResponseContract response;
        this.checkForModifications = false;


        response = this.responseContract; 
  

        if(response.ExecutionStatus == ExecutionStatus::Failed)
        {
            errorMsg = response.GetFormattedResponseObject();
            errorMsg += response.GetFormattedErrorMessage();
        }


        if(errorMsg != '')
        {
            ISMTelemetryDualWrite telemetry = ISMTelemetryDualWrite::construct();
            telemetry.addRuntimeProperty(ISMTelemetryProperties::Error , errorMsg);
            telemetry.addRuntimeProperty(ISMTelemetryProperties::EntityName, tableId2Name(entityRecord.TableId));
            telemetry.addRuntimeProperty(ISMTelemetryProperties::RecordData, JsonSerializer::jsonSerialize(entityRecord));
            telemetry.processEvent();
        }
        




    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>