<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ISMTelemetryEventHandler</Name>
	<SourceCode>
		<Declaration><![CDATA[
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.
/// <summary>
/// Initalizes the telemetry parameters for all child classes of ISMTelemetryBase
/// </summary>
internal final class ISMTelemetryEventHandler
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>sysIntParameters_OnInitializing</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the telemetry parameters for all child classes of ISMTelemetryBase
    /// </summary>
    /// <param name="sender">sender</param>
    /// <param name="e">event arguments</param>
    [SuppressBPWarning('BPParameterNotUsed', 'Parameter required by the event interface.'),
    FormEventHandler(formStr(SysIntParameters), FormEventType::Initializing)]
    public static void sysIntParameters_OnInitializing(xFormRun sender, FormEventArgs e)
    {
        #AOT

        //set parent class and method you want to investigate
        ClassName baseClassName = classStr(ISMTelemetryBase);

        SysDictClass dictClass = new SysDictClass(className2Id(baseClassName));
        List extendedClassList = dictClass.extendedBy();

        //loop through all child classes
        if (extendedClassList.elements())
        {
            ListEnumerator listEnumerator = extendedClassList.getEnumerator();

            while (listEnumerator.moveNext())
            {
                ClassId childClassId = listEnumerator.current();
                TreeNode childClassNode = TreeNode::findNode(#ClassesPath + #AOTDelimiter + classId2Name(childClassId));

                ISMTelemetryParameters param = ISMTelemetryParameters::find(childClassNode.AOTname());

                if (!param)
                {
                    ttsbegin;
                    param.TelemetryClass = childClassNode.AOTname();
                    param.IsEnabled = NoYes::Yes;
                    param.SeverityLevel = ISMTelemetrySeverityLevel::Information;
                    param.insert();
                    ttscommit;
                }
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>