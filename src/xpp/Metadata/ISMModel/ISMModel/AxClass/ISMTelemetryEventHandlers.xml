<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ISMTelemetryEventHandlers</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Used for Eventhandlers for telemetry events
/// </summary>
internal final class ISMTelemetryEventHandlers
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>batchRunBusinessEvents_emitJobEndBusinessEventsUsingBatchJobUpdateTmpDelegate</Name>
				<Source><![CDATA[
    ///<summary>
    ///Jobs moving into state finished beeing logged in telemetry
    ///</summary>
    ///<param name="_jobsToUpdate">The batch jobs to update</param>
    [SubscribesTo(classStr(BatchRunBusinessEvents), delegateStr(BatchRunBusinessEvents, emitJobEndBusinessEventsUsingBatchJobUpdateTmpDelegate))]
    public static void batchRunBusinessEvents_emitJobEndBusinessEventsUsingBatchJobUpdateTmpDelegate(BatchJobUpdateTmp _jobsToUpdate)
    {
        while select _jobsToUpdate
        {
            BatchJob job;

            select firstonly job
                where job.RecId == _jobsToUpdate.BatchJobId;

            try
            {
                ISMTelemetryBatch batch = ISMTelemetryBatch::construct(job.orig(), job, _jobsToUpdate);
                batch.processEvent(ISMTelemetryEventNames::BatchJobStatusUpdate);
            }
            catch
            {
                // Do nothing telemetry should not stop the batch job
                Global::exceptionTextFallThrough();
            }
        }

    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>